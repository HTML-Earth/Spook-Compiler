Shader{
  #Declarations
  Int i = 0, radius, height = 100, length = 100; // virker ikke
  Int d;

  #Unused for
  for(d = 0 to 1){}

  #Increment i by 4, i = 4
  for (0 to 4) {
    i = i + 1;
  }

  #Forget previous for-loop, this one does even require a block
  for (Int i = 0 to 4)
    i = 4;

  #Shape movement
  Float jumptime = abs(sin(iTime * i));
  Float yPos = 300 * (jumptime*0.5+1) - 200;

  #Get in Shape
  Rectangle red = (height, length, Color.Green);
  Bulletbill billy = (height, length, Color.Blue);
  if (true) {
    radius = 46 + 100 / 2 + 4; #Det 100
  } else
    radius = 0;

  #And Action!
  Scene.color = Color.Black;
  Scene.Add(circleFactory(radius, Color.Red));
  Scene.Add(rec, 100, yPos);
  Scene.Add(billy.setShadow);
  Scene.Add(billy);
}

#Totally unnecessary function to create new circles
Circle circleFactory(Int radius, Color color) {
  return Circle(radius, color);
}

Class Bulletbill extends Shape{
  Float length, height;
  Float radius = height/2;
  #Color from Shape
  Rectangle body;
  Circle head;
  Color shadow = Color(105, 105, 105);

  #Constructor
  Bulletbill (Float height, Float length, Color color) {
    this.height = height;
    this.length = length;
    super.color = color;

    body = (length, height, super.color);
    head = (radius, super.color);
    head.position.x = body.position.x+length;
    head.position.y = body.position.y+radius;
  }

  #Create shadow func
  Bulletbill setShadow(){
    Bulletbill billShadow = this.bulletbill
    #Stretch rectangle
    Scale(billShadow.body.x, 1,3);
    Scale(billShadow.body.y, 0,9);

    #Circle -> Ellipse
    Scale(billShadow.head.x, 1,3);
    Scale(billShadow.head.y, 0,9);

    #Place shadow beneath original figure
    billShadow.body.position -= billShadow.body.height + 100;

    return billShadow;
  }
}